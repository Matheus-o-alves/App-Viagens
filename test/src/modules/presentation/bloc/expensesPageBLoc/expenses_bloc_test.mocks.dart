// Mocks generated by Mockito 5.4.5 from annotations
// in onfly_viagens_app/test/src/modules/presentation/bloc/expensesPageBLoc/expenses_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:onfly_viagens_app/src/core/core.dart' as _i5;
import 'package:onfly_viagens_app/src/modules/domain/domain.dart' as _i2;
import 'package:onfly_viagens_app/src/modules/domain/entity/travel_card_entity.dart'
    as _i10;
import 'package:onfly_viagens_app/src/modules/domain/usecase/delete_travels_usescases.dart'
    as _i7;
import 'package:onfly_viagens_app/src/modules/domain/usecase/get_travel_expense_by_id_use_case.dart'
    as _i8;
import 'package:onfly_viagens_app/src/modules/domain/usecase/save_travel_expenses_usecase.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTravelExpensesRepository_0 extends _i1.SmartFake
    implements _i2.TravelExpensesRepository {
  _FakeTravelExpensesRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDateTime_2 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetTravelExpensesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTravelExpensesUseCase extends _i1.Mock
    implements _i2.GetTravelExpensesUseCase {
  MockGetTravelExpensesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TravelExpensesRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTravelExpensesRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TravelExpensesRepository);

  @override
  _i4.Future<_i3.Either<_i5.Failure, _i2.TravelExpensesInfoEntity>> call(
    _i5.NoParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<
              _i3.Either<_i5.Failure, _i2.TravelExpensesInfoEntity>
            >.value(
              _FakeEither_1<_i5.Failure, _i2.TravelExpensesInfoEntity>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i3.Either<_i5.Failure, _i2.TravelExpensesInfoEntity>>);
}

/// A class which mocks [SaveTravelExpenseUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveTravelExpenseUseCase extends _i1.Mock
    implements _i6.SaveTravelExpenseUseCase {
  MockSaveTravelExpenseUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.Either<_i5.Failure, int>> call(
    _i2.TravelExpenseEntity? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i3.Either<_i5.Failure, int>>.value(
              _FakeEither_1<_i5.Failure, int>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i3.Either<_i5.Failure, int>>);
}

/// A class which mocks [DeleteTravelExpenseUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTravelExpenseUseCase extends _i1.Mock
    implements _i7.DeleteTravelExpenseUseCase {
  MockDeleteTravelExpenseUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.Either<_i5.Failure, int>> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<_i3.Either<_i5.Failure, int>>.value(
              _FakeEither_1<_i5.Failure, int>(
                this,
                Invocation.method(#call, [id]),
              ),
            ),
          )
          as _i4.Future<_i3.Either<_i5.Failure, int>>);
}

/// A class which mocks [GetTravelExpenseByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTravelExpenseByIdUseCase extends _i1.Mock
    implements _i8.GetTravelExpenseByIdUseCase {
  MockGetTravelExpenseByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.Either<_i5.Failure, _i2.TravelExpenseEntity?>> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<
              _i3.Either<_i5.Failure, _i2.TravelExpenseEntity?>
            >.value(
              _FakeEither_1<_i5.Failure, _i2.TravelExpenseEntity?>(
                this,
                Invocation.method(#call, [id]),
              ),
            ),
          )
          as _i4.Future<_i3.Either<_i5.Failure, _i2.TravelExpenseEntity?>>);
}

/// A class which mocks [TravelExpenseEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockTravelExpenseEntity extends _i1.Mock
    implements _i2.TravelExpenseEntity {
  MockTravelExpenseEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);

  @override
  DateTime get expenseDate =>
      (super.noSuchMethod(
            Invocation.getter(#expenseDate),
            returnValue: _FakeDateTime_2(this, Invocation.getter(#expenseDate)),
          )
          as DateTime);

  @override
  String get description =>
      (super.noSuchMethod(
            Invocation.getter(#description),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#description),
            ),
          )
          as String);

  @override
  String get categoria =>
      (super.noSuchMethod(
            Invocation.getter(#categoria),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#categoria),
            ),
          )
          as String);

  @override
  double get quantidade =>
      (super.noSuchMethod(Invocation.getter(#quantidade), returnValue: 0.0)
          as double);

  @override
  bool get reembolsavel =>
      (super.noSuchMethod(Invocation.getter(#reembolsavel), returnValue: false)
          as bool);

  @override
  bool get isReimbursed =>
      (super.noSuchMethod(Invocation.getter(#isReimbursed), returnValue: false)
          as bool);

  @override
  String get status =>
      (super.noSuchMethod(
            Invocation.getter(#status),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#status),
            ),
          )
          as String);

  @override
  String get paymentMethod =>
      (super.noSuchMethod(
            Invocation.getter(#paymentMethod),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#paymentMethod),
            ),
          )
          as String);

  @override
  String get expenseDateFormatted =>
      (super.noSuchMethod(
            Invocation.getter(#expenseDateFormatted),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#expenseDateFormatted),
            ),
          )
          as String);

  @override
  double get amount =>
      (super.noSuchMethod(Invocation.getter(#amount), returnValue: 0.0)
          as double);

  @override
  String get category =>
      (super.noSuchMethod(
            Invocation.getter(#category),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#category),
            ),
          )
          as String);

  @override
  bool get reimbursable =>
      (super.noSuchMethod(Invocation.getter(#reimbursable), returnValue: false)
          as bool);

  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
}

/// A class which mocks [TravelCardEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockTravelCardEntity extends _i1.Mock implements _i10.TravelCardEntity {
  MockTravelCardEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);

  @override
  String get nome =>
      (super.noSuchMethod(
            Invocation.getter(#nome),
            returnValue: _i9.dummyValue<String>(this, Invocation.getter(#nome)),
          )
          as String);

  @override
  String get numero =>
      (super.noSuchMethod(
            Invocation.getter(#numero),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#numero),
            ),
          )
          as String);

  @override
  String get titular =>
      (super.noSuchMethod(
            Invocation.getter(#titular),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#titular),
            ),
          )
          as String);

  @override
  String get validade =>
      (super.noSuchMethod(
            Invocation.getter(#validade),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#validade),
            ),
          )
          as String);

  @override
  String get bandeira =>
      (super.noSuchMethod(
            Invocation.getter(#bandeira),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#bandeira),
            ),
          )
          as String);

  @override
  double get limiteDisponivel =>
      (super.noSuchMethod(
            Invocation.getter(#limiteDisponivel),
            returnValue: 0.0,
          )
          as double);

  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
}
