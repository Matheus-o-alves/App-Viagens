// Mocks generated by Mockito 5.4.5 from annotations
// in onfly_viagens_app/test/src/modules/presentation/bloc/formExpenseBloc/expense_form_event_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:onfly_viagens_app/src/modules/data/model/travels/payments_scheduled_model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTravelExpenseModel_1 extends _i1.SmartFake
    implements _i2.TravelExpenseModel {
  _FakeTravelExpenseModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TravelExpenseModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTravelExpenseModel extends _i1.Mock
    implements _i2.TravelExpenseModel {
  MockTravelExpenseModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);

  @override
  DateTime get expenseDate =>
      (super.noSuchMethod(
            Invocation.getter(#expenseDate),
            returnValue: _FakeDateTime_0(this, Invocation.getter(#expenseDate)),
          )
          as DateTime);

  @override
  String get description =>
      (super.noSuchMethod(
            Invocation.getter(#description),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#description),
            ),
          )
          as String);

  @override
  String get categoria =>
      (super.noSuchMethod(
            Invocation.getter(#categoria),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#categoria),
            ),
          )
          as String);

  @override
  double get quantidade =>
      (super.noSuchMethod(Invocation.getter(#quantidade), returnValue: 0.0)
          as double);

  @override
  bool get reembolsavel =>
      (super.noSuchMethod(Invocation.getter(#reembolsavel), returnValue: false)
          as bool);

  @override
  bool get isReimbursed =>
      (super.noSuchMethod(Invocation.getter(#isReimbursed), returnValue: false)
          as bool);

  @override
  String get status =>
      (super.noSuchMethod(
            Invocation.getter(#status),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#status),
            ),
          )
          as String);

  @override
  String get paymentMethod =>
      (super.noSuchMethod(
            Invocation.getter(#paymentMethod),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#paymentMethod),
            ),
          )
          as String);

  @override
  String get expenseDateFormatted =>
      (super.noSuchMethod(
            Invocation.getter(#expenseDateFormatted),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#expenseDateFormatted),
            ),
          )
          as String);

  @override
  double get amount =>
      (super.noSuchMethod(Invocation.getter(#amount), returnValue: 0.0)
          as double);

  @override
  String get category =>
      (super.noSuchMethod(
            Invocation.getter(#category),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#category),
            ),
          )
          as String);

  @override
  bool get reimbursable =>
      (super.noSuchMethod(Invocation.getter(#reimbursable), returnValue: false)
          as bool);

  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  Map<String, dynamic> toDatabaseMap() =>
      (super.noSuchMethod(
            Invocation.method(#toDatabaseMap, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  Map<String, dynamic> toLegacyJson() =>
      (super.noSuchMethod(
            Invocation.method(#toLegacyJson, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i2.TravelExpenseModel copyWith({
    int? id,
    DateTime? expenseDate,
    String? description,
    String? categoria,
    double? quantidade,
    bool? reembolsavel,
    bool? isReimbursed,
    String? status,
    String? paymentMethod,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #id: id,
              #expenseDate: expenseDate,
              #description: description,
              #categoria: categoria,
              #quantidade: quantidade,
              #reembolsavel: reembolsavel,
              #isReimbursed: isReimbursed,
              #status: status,
              #paymentMethod: paymentMethod,
            }),
            returnValue: _FakeTravelExpenseModel_1(
              this,
              Invocation.method(#copyWith, [], {
                #id: id,
                #expenseDate: expenseDate,
                #description: description,
                #categoria: categoria,
                #quantidade: quantidade,
                #reembolsavel: reembolsavel,
                #isReimbursed: isReimbursed,
                #status: status,
                #paymentMethod: paymentMethod,
              }),
            ),
          )
          as _i2.TravelExpenseModel);
}
